# Project template
- name: Overleaf Workshop
  link: github.com/iamhyc/overleaf-workshop
  github: iamhyc/overleaf-workshop
  quote: >
    <mark>LaTeX</mark>
    <mark>Overleaf</mark>
    <mark>VS Code Extension</mark>
  description: |
    Open Overleaf (ShareLatex) projects in VSCode, with full collaboration support.
    
    The full user guide is available at [GitHub Wiki](https://github.com/iamhyc/Overleaf-Workshop/wiki).

    <img src="https://github.com/iamhyc/Overleaf-Workshop/blob/master/docs/assets/demo01-login.gif?raw=true" height="250px" />

- name: cluster-tap - Simple Automation Utility for Small Cluster
  # link: github.com/lasso-sustech/cluster-tap
  github: lasso-sustech/cluster-tap
  quote: >
    <mark>Automation</mark>
    <mark>Utility</mark>
  description: | # this will include new lines to allow paragraphs
    Single Python file, to distribute tasks and collect *execution results* or *exception traceback* on remote clients in cluster.
    The timing of automation pipeline is based on local system time, which guarantees minimum extra communication cost.
    
    Together with the [stream-replay](https://github.com/lasso-sustech/stream-replay) utility and [wlsops-hack](https://github.com/lasso-sustech/wlsops-hack) kernel module, the demo below shows how
    we automate a Wi-Fi network traffic optimization procedure.

    <img src="https://raw.githubusercontent.com/lasso-sustech/stream-replay/master/previews/screenshot.png" height="250px" />

- name: Linux Wi-Fi Driver Realtime Hook
  link: github.com/iamhyc/wlsops-hack
  github: iamhyc/wlsops-hack
  quote: >
    <mark>mmap</mark>
    <mark>procfs</mark>
    <mark>mac80211</mark>
  description: | # this will include new lines to allow paragraphs
    This project aims at providing the fastest access to the wireless NIC driver from userspace (the most recommended NIC for now is the `intel 8260/9260` series).

    In fact, Linux mac80211 subsystem provides a set of APIs to monitor and modify the parameters related to IEEE 802.11 MAC design.
    However, the existing tools rely on either `ioctl` or `genl` which could not provide real-time and robust access to kernel driver.
    In this project, we design one kernel module to hijack the function entry of the driver, and use `mmap` to establish a shared-memory communication between kernel and userspace.
    The experiment results show that we could alter a set of parameters (related to channel access priority) **within 10 millisecond for 1000 accesses**.

- name: Linux Kernel IP-based Encryption
  link: github.com/iamhyc/Netfilter-L4-Encryption
  github: iamhyc/Netfilter-L4-Encryption
  quote: >
    <mark>Linux Netfilter</mark>
    <mark>Linux Netlink</mark>
    <mark>AES-128</mark>
  description: | # this will include new lines to allow paragraphs
    This project implements an in-stack network data encryption trial based on **Linux Netfilter subsystem**.
    It uses asynchronous encryption method `AES-128` provided by kernel function, to encrypt the *payload of L3* (i.e., content of an IP packet) and decrypt it correspondingly at the receiver's side.

    In the possible future work, this project would be extended with an identification mechanism which allows the tx/rx to negotiate the enable of en(de)cryption, and a userspace tool based on **Linux Netlink subsystem** for key management.
